name: Android PR Builder

on:
  pull_request:
    types:
      - closed
    branches: [ an/develop ]

defaults:
  run:
    working-directory: ./android

jobs:
  CI_Android_Develop:
    uses: ./.github/workflows/Android_Develop_CI.yml
    secrets: inherit

  Distribution_To_Discord:
    name: Alpha APK to Discord
    runs-on: ubuntu-latest
    needs: [ CIAndroidDevelop ]
    steps:
      - uses: actions/checkout@v4
      - name: Gradle cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Create Google-Services.json
        env:
          GOOGLE_SERVICES_ALPHA: ${{ secrets.GOOGLE_SERVICES_ALPHA }}
          GOOGLE_SERVICES_BETA: ${{ secrets.GOOGLE_SERVICES_BETA }}
          GOOGLE_SERVICES: ${{ secrets.GOOGLE_SERVICES }}
        run: |
          touch ./app/src/debug/google-services.json
          touch ./app/src/alpha/google-services.json
          touch ./app/src/beta/google-services.json
          mkdir ./app/src/release
          touch ./app/src/release/google-services.json
          echo $GOOGLE_SERVICES_ALPHA >> ./app/src/debug/google-services.json
          echo $GOOGLE_SERVICES_ALPHA >> ./app/src/alpha/google-services.json
          echo $GOOGLE_SERVICES_BETA >> ./app/src/beta/google-services.json
          echo $GOOGLE_SERVICES >> ./app/src/release/google-services.json

      - name: Check google-services.json content
        run: cat ./app/src/debug/google-services.json

      - name: Create Local Properties
        run: touch local.properties

      - name: Access Local Properties
        env:
          POKE_BASE_URL: ${{ secrets.POKE_BASE_URL }}
        run: |
          echo POKE_BASE_URL=\"${{ secrets.POKE_BASE_URL }}\" >> local.properties

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build alpha APK
        run: ./gradlew assembleAlpha

      - name: Upload alpha APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-artifact
          path: android/app/build/outputs/apk/alpha/
          if-no-files-found: error

      - name: Check APK existence
        run: ls -al app/build/outputs/apk/alpha/

      - name: Extract Version Name
        env:
          title: ${{ github.event.pull_request.title }}
        run: |
          version=$(echo '${{ env.title }}' | grep -oP '\d+\.\d+\.\d+')
          echo "version=v$version" >> $GITHUB_ENV

      - name: Send alpha version APK to Discord with Embeds
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.AlPHA_APK_DISCORD_WEB_HOOK }}
          VERSION: ${{ env.version }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_URL: ${{ github.event.pull_request.html_url }}
        run: |
          CONTENT="ÏµúÏã† Í∞úÎ∞ú Î≤ÑÏ†Ñ APK Í∞Ä ÎÇòÏôîÏñ¥Ïöî!üéâ
           [Î∞∞Ìè¨ Î≤ÑÏ†Ñ] : $VERSION!
           [Ìï¥Îãπ PR Ï†úÎ™©] : $PR_TITLE"
          EMBED=$(jq -n \
            --arg title "PR Merged: $PR_TITLE" \
            --arg url "$PR_URL" \
            --arg description "Version: $VERSION üéâ" \
            '{
              "title": $title,
              "url": $url,
              "description": $description,
              "color": 3066993
            }'
          )

          PAYLOAD=$(jq -n \
            --arg content "$CONTENT" \
            --argjson embeds "[$EMBED]" \
            '{
              "content": $content,
              "embeds": $embeds
            }'
            )


          curl -F "payload_json=$PAYLOAD" \
               -F "file=@app/build/outputs/apk/alpha/app-alpha.apk" \
                $DISCORD_WEBHOOK_URL

